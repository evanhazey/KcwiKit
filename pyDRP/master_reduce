#!/bin/zsh
# usage: complete KCWI reduction
# if running straight through, supply regions files
# if making regions files, run:
#   stage1drp, then
#   stage1plusToStage2pre, then
#   stage2postregToEnd

## DEPENDENCIES: zsh, astropy, gsed (Mac), python 3, emoji terminal support :-)
## Assuming master_reduce is at /path/to/dir/kcwi/pyDRP/mater_reduce
## i.e. kcwi directory structure is intact!

# what machine are we running on?
case "$(uname -s)" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=MacOS;;
    *)          machine="UNKNOWN:${unameOut}"
esac

file=`realpath "$0"` #where is the master_reduce file located?
fileloc=`dirname "$file"`

# Intro
echo "Hello! ðŸ˜Ž"
echo "We are running on ${machine}"
echo "master_reduce located in ${fileloc}"
echo ""
echo "Welcome to the CAREFUL version of the KCWI python DRP!"
echo "Please make sure you have run 'conda activate kcwidrp' before proceeding"
echo "Please specify an obj.txt file (-o)"

set -e #make sure we don't proceed if not in kcwidrp environment


while getopts d:ho:s:c: optval
do
   case $optval in
		 h) HELP=1;;
		 d) dir="$OPTARG";;
		 # st) STAGE="$OPTARG";;
		 o) obj=(); while IFS= read -r line; do obj+=("$line"); done <$OPTARG;;
		 s) IFS=, # split on (tres) commas
		    stages=($OPTARG);;
     c) cfg="$OPTARG";;
		 *) echo "master_reduce -h for help"; exit -1;;
   esac
done
# shift $((OPTIND-1));

if [ $HELP ]; then
  echo ""
	echo "master_reduce -d RAW_DIR -o obj.txt  -s stage1drp,stage1plus,... [-h]"
	echo "KCWI python DRP + extra intermediate steps"
	echo "-d RAW_DIR  directory with raw data (assumed to be current working directory)"
	# echo "-st STAGE   which stage of the reduction to do?"
	echo "-o obj.txt  name of text file in RAW_DIR with list of science objects e.g. \nkb181110_00061 \nkb181110_00062 \n.\n.\n."
	echo "-s STAGES   list of stages to run (default: main) e.g. \nstage1drp,stage1plus,stage2drp \nor \nstage1plusToEnd"
  echo "-c kcwi.cfg alternate configuration file (assumed to be in RAW_DIR)"
  echo "-h .......  help (display)"
  echo ""
  echo "Sample Call: ~/Software/kcwi/pyDRP/master_reduce -o sci.txt"
	exit -1
fi


# IFS=$'\n' # for array construction later

stage1drp () {
  echo ""
  if [ $cfg ]
  then
    echo "Stage 1 (using $cfg)"
    reduce_kcwi -f kb*.fits -g -st 1 -c $cfg
  else
    echo "Stage 1"
    reduce_kcwi -f kb*.fits -g -st 1
  fi
  echo "Stage 1 is Done!"
}
# make .reg files
stage1plus () {
  # make *_smsk.fits files
  for i in $obj
  do
  	python ${fileloc}/kcwi_masksky_ds9.py redux/${i}_intf.fits redux/$i.reg;
  done

  mkdir -p redux/stage5_nomask
  mv redux/*intk.fits redux/*sky.fits redux/stage5_nomask || true

  cp kcwi.proc kcwi_stage1plus.proc

  if [ $machine == "MacOS" ]
  then
    sed -i '' '/sky/d' kcwi.proc #remove sky
    sed -i '' '/intk/d' kcwi.proc #remove intk
  elif  [ $machine == "Linux" ]
  then
    sed -i '/sky/d' kcwi.proc #remove sky
    sed -i '/intk/d' kcwi.proc #remove intk
  else
    echo "OS not recognized, can't edit kcwi.proc"
  fi

  #make kcwi.sky file
  for i in $obj
  do
  	echo ${i}.fits ${i}.fits redux/${i}_smsk.fits
  done >> kcwi.sky
}

stage2drp () {
  if [ $cfg ]
  then
    echo "Stage 2 (using $cfg)"
    reduce_kcwi -f kb*.fits -g -st 2 -c $cfg
  else
    echo "Stage 2"
    reduce_kcwi -f kb*.fits -g -st 2
  fi
  echo "Stage 2 is Done!"
}


stage2prereg () {
  #note fitsheader needs astropy!
  # SAVEIFS=$IFS
  IFS=$'\n'
  all=(`fitsheader redux/kb*_icube.fits --extension 0 -f -k IMTYPE | grep OBJECT | sed 's/_icube.*//' | sed 's$redux/$$'`)
  # IFS=$SAVEIFS

  python ${fileloc}/kcwi_flatten_cube.py redux/${^obj}_icube.fits #make *_icube_2d.fits files
  python ${fileloc}/kcwi_collapse.py redux/${^all}_icube.fits #make *_icube.thum.fits files
}

# make *.icube_2d.reg and *_icube.thum.reg files

stage2postreg () {
  python ${fileloc}/kcwi_makemask_medfilter.py redux #make *_icube_2d.mask.fits and *_icube.mask.fits files
  #make a backup of *icube.fits files
  mkdir -p redux/pre_med_filt
  cp redux/*icube.fits redux/pre_med_filt

  IFS=$'\n'
  all=(`fitsheader redux/kb*_icube.fits --extension 0 -f -k IMTYPE | grep OBJECT | sed 's/_icube.*//' | sed 's$redux/$$'`)
  python ${fileloc}/kcwi_medfilter.py redux/${^all}_icube.fits #median filter

  cp kcwi.proc kcwi_stage2postreg.proc

  # remove SKY and OBJECT from kcwi.proc
  if [ $machine == "MacOS" ]
  then
    sed -i '' '/OBJECT/d' kcwi.proc
    sed -i '' '/SKY/d' kcwi.proc
  elif  [ $machine == "Linux" ]
  then
    sed -i '/OBJECT/d' kcwi.proc
    sed -i '/SKY/d' kcwi.proc
  else
    echo "OS not recognized, can't edit kcwi.proc"
  fi
}


stage3drp () {
  if [ $cfg ]
  then
    echo "Stage 3 (using $cfg)"
    echo "Note this stage will require some human intervention..."
    reduce_kcwi -f kb*.fits -g -st 3 -c $cfg
  else
    echo "Stage 3"
    echo "Note this stage will require some human intervention..."
    reduce_kcwi -f kb*.fits -g -st 3
  fi
  echo "Stage 3 is Done!"
}

stage3plus () {
  mkdir -p fluxcal
  cd fluxcal
  ls ../redux/kb*invsens*fits | column -c 1 >> med_bl.list

  IFS=$'\n'
  std=($(ls ../redux/kb*invsens*fits | xargs -n 1 basename | sed 's/_invsens.*//'))

  if [ ${#arr[@]} -eq 0 ]; then
    echo "No standard stars detected! Exiting..."
    exit
  fi

  python ${fileloc}/kcwi_combinestd.py med_bl.list
  cp -n med_bl_invsens.fits ../redux #this should be fixed? -n so no overwrite... need to include BM cfg, etc.
  cd ../ #perhaps there's a better way to do this

  cp kcwi.proc kcwi_stage3plus.proc

  #clean proc table
  if [ $machine == "MacOS" ]
  then
    gsed -i '/\bea\b/d' kcwi.proc # whole word 'ea'
    gsed -i '/icubed/d' kcwi.proc # in case there were no std. stars
    gsed -i '/icubes/d' kcwi.proc

    for i in $std
    do
    	sed -i '' "s/${i}.fits/        med_bl.fits/g" kcwi.proc
    done

  elif  [ $machine == "Linux" ]
  then
    sed -i '/\bea\b/d' kcwi.proc # whole word 'ea'
    sed -i '/icubed/d' kcwi.proc # in case there were no std. stars
    sed -i '/icubes/d' kcwi.proc

    for i in $std
    do
    	sed -i "s/${i}.fits/        med_bl.fits/g" kcwi.proc
    done

  else
    echo "OS not recognized, can't edit kcwi.proc"
  fi

  mkdir -p redux/pre_std_star_stack
  cp redux/*icubes.fits redux/pre_std_star_stack
}

stage4drp () {
  if [ $cfg ]
  then
    echo "Stage 4 (using $cfg)"
    reduce_kcwi -f kb*.fits -g -st 3 -c $cfg
  else
    echo "Stage 4"
    reduce_kcwi -f kb*.fits -g -st 3
  fi
  echo "Stage 4 is Done!"
  echo "First Part of Reduction Complete"
  echo "Now onto stacking??"
}


main () {
	stage1drp
	stage1plus

	stage2drp
	stage2prereg
  stage2postreg

	stage3drp
	stage3plus

	stage4drp
}

# assume primary failure point is during stage1drp
stage1plusToEnd () {
	stage1plus

	stage2drp
  stage2prereg
  stage2postreg

	stage3drp
	stage3plus

	stage4drp
}

stage1plusToStage2pre () {
	stage1plus

	stage2drp
  stage2prereg
}


stage2postregToEnd () {
  stage2postreg

	stage3drp
	stage3plus

	stage4drp
}

### Beginning of Program ###

# dir=/Volumes/Data/Documents/Chuck/KCWI_DRP/pyDRP/q0933-MD75_bash_test-2/
if [ $dir ]; then
  cd $dir
else
  dir=`pwd`
fi
echo ""
echo "We are in $dir"
echo ""
echo "Science Objects:"
echo $obj | xargs -n 1

if [ $stages ]; then
  echo ""
  echo "Stages to Do:"
  for func in "${=stages}"; do echo ${func}; done;
  echo ""
	for func in "${=stages}"; do ${func}; done;
else
	main
fi
